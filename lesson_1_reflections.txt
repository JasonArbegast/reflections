How did viewing a diff between two versions of a
file help you see the bug that was introduced?

It pinpointed an error very quickly, showing all
areas that changed from a working product to one
that didn't.

How could having easy access to the entire history
of a file make you a more efficient programmer in
the long term?

You can see the progression/evolvement of the
program over time. You can see the thought process
as new problems come along. You can see what worked
in a similar situation and what didn't.

What do you think are the pros and cons of manually
choosing when to create a commit, like you do in
Git, vs having versions automatically saved, like
Google docs does?

You can decide what quantity of change is adequate
for you based on your abilities and preferences. 
It may be a pain to someone whose opinion on when
to commit differs.

Why do you think some version control systems, like
Git, allow saving multiple files in one commit,
while others, like Google Docs, treat each file
separately?

You can save all files together with a repository,
but it doesn't tell you right away if the changes
have been made to all related files. If you change
something in file 1 and save the repository, it
doesn't necessarily mean you made all relevant 
changes in file 2.

How can you use the commands git log and git diff
to view the history of files?

Git log shows all the previous commits. Git diff
shows the precise changes. 

How might using version-control make you more
confident to make changes that could break
something?

Knowing that we can always revert to a saved
commit means we can take risks and try new things,
and if anything goes wrong we just go back.

What do you want to use Git for?

I want to learn what it is and what it can do. I
would like to use it finish the cryptogram program.